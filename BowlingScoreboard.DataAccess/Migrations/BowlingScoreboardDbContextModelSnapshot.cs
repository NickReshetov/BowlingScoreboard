// <auto-generated />
using System;
using BowlingScoreboard.DataAccess.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BowlingScoreboard.DataAccess.Migrations
{
    [DbContext(typeof(BowlingScoreboardDbContext))]
    partial class BowlingScoreboardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LineId");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Lines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1840d44-905e-48c3-aff3-e11aebdffe22"),
                            Number = 1
                        });
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GameId");

                    b.Property<string>("Name");

                    b.Property<int>("PlayOrder");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Roll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<Guid>("RoundId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Rolls");
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("RoundTypeId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundTypeId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.RoundType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RoundTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58890a4e-b5ff-4841-b469-a807b9c96c63"),
                            Name = "Strike"
                        },
                        new
                        {
                            Id = new Guid("59337048-c1aa-4b94-a80c-0e32671be4fd"),
                            Name = "Spare"
                        },
                        new
                        {
                            Id = new Guid("309bd6f7-0fb7-4d63-8310-23887496e50a"),
                            Name = "Open"
                        });
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Game", b =>
                {
                    b.HasOne("BowlingScoreboard.DataAccess.EntityFramework.Entities.Line", "Line")
                        .WithMany("Games")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Player", b =>
                {
                    b.HasOne("BowlingScoreboard.DataAccess.EntityFramework.Entities.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Roll", b =>
                {
                    b.HasOne("BowlingScoreboard.DataAccess.EntityFramework.Entities.Round", "Round")
                        .WithMany("Rolls")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BowlingScoreboard.DataAccess.EntityFramework.Entities.Round", b =>
                {
                    b.HasOne("BowlingScoreboard.DataAccess.EntityFramework.Entities.Player", "Player")
                        .WithMany("Rounds")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BowlingScoreboard.DataAccess.EntityFramework.Entities.RoundType", "RoundType")
                        .WithMany()
                        .HasForeignKey("RoundTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
